{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-gamma-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-gamma-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-gamma-mean' );\nvar mode = require( '@stdlib/stats-base-dists-gamma-mode' );\nvar quantile = require( '@stdlib/stats-base-dists-gamma-quantile' );\nvar skewness = require( '@stdlib/stats-base-dists-gamma-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-gamma-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-gamma-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-gamma-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-gamma-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-gamma-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-gamma-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-gamma-pdf' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction gammaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction gammaLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction gammaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction gammaMGF( t ) {\n\treturn mgf( t, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction gammaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction gammaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Gamma distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - rate parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Gamma} distribution instance\n*\n* @example\n* var gamma = new Gamma( 1.0, 1.0 );\n*\n* var y = gamma.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = gamma.mode;\n* // returns 0.0\n*/\nfunction Gamma() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Gamma) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Gamma();\n\t\t}\n\t\treturn new Gamma( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Gamma distribution differential entropy.\n*\n* @name entropy\n* @memberof Gamma.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.entropy;\n* // returns ~-0.462\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Gamma.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.kurtosis;\n* // returns 1.5\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution expected value.\n*\n* @name mean\n* @memberof Gamma.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.mean;\n* // returns ~0.333\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution mode.\n*\n* @name mode\n* @memberof Gamma.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.mode;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution skewness.\n*\n* @name skewness\n* @memberof Gamma.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.skewness;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution standard deviation.\n*\n* @name stdev\n* @memberof Gamma.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.stdev;\n* // returns ~0.167\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Gamma distribution variance.\n*\n* @name variance\n* @memberof Gamma.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var gamma = new Gamma( 4.0, 12.0 );\n*\n* var v = gamma.variance;\n* // returns ~0.028\n*/\nsetReadOnlyAccessor( Gamma.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.cdf( 0.5 );\n* // returns ~0.594\n*/\nsetReadOnly( Gamma.prototype, 'cdf', gammaCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.logcdf( 0.8 );\n* // returns ~-0.188\n*/\nsetReadOnly( Gamma.prototype, 'logcdf', gammaLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.logpdf( 0.8 );\n* // returns ~-0.651\n*/\nsetReadOnly( Gamma.prototype, 'logpdf', gammaLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.mgf( 0.5 );\n* // returns ~1.306\n*/\nsetReadOnly( Gamma.prototype, 'mgf', gammaMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.pdf( 0.8 );\n* // returns ~0.522\n*/\nsetReadOnly( Gamma.prototype, 'pdf', gammaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Gamma.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var gamma = new Gamma( 2.0, 4.0 );\n*\n* var v = gamma.quantile( 0.5 );\n* // returns ~0.42\n*/\nsetReadOnly( Gamma.prototype, 'quantile', gammaQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Gamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution constructor.\n*\n* @module @stdlib/stats-base-dists-gamma-ctor\n*\n* @example\n* var Gamma = require( '@stdlib/stats-base-dists-gamma-ctor' );\n*\n* var gamma = new Gamma( 1.0, 1.0 );\n*\n* var y = gamma.cdf( 0.8 );\n* // returns ~0.551\n*\n* var mode = gamma.mode;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "entropy", "kurtosis", "mean", "mode", "quantile", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "mgf", "pdf", "format", "gammaCDF", "x", "gammaLogCDF", "gammaLogPDF", "gammaMGF", "t", "gammaPDF", "gammaQuantile", "p", "Gamma", "alpha", "beta", "value", "main"]
}
